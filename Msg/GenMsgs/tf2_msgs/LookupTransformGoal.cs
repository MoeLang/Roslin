namespace Roslin.Msg.tf2_msgs
{
    [MsgInfo("tf2_msgs/LookupTransformGoal", "35e3720468131d675a18bb6f3e5f22f8", "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n")]
    public partial class LookupTransformGoal : RosMsg
    {
        public System.String target_frame
        {
            get;
            set;
        }

        public System.String source_frame
        {
            get;
            set;
        }

        public System.DateTime source_time
        {
            get;
            set;
        }

        public System.TimeSpan timeout
        {
            get;
            set;
        }

        public System.DateTime target_time
        {
            get;
            set;
        }

        public System.String fixed_frame
        {
            get;
            set;
        }

        public System.Boolean advanced
        {
            get;
            set;
        }

        public LookupTransformGoal(): base()
        {
        }

        public LookupTransformGoal(System.IO.BinaryReader binaryReader): base(binaryReader)
        {
        }

        public override void Serilize(System.IO.BinaryWriter binaryWriter)
        {
            binaryWriter.Write(target_frame.Length); binaryWriter . Write ( System . Text . Encoding . UTF8 . GetBytes ( target_frame ) ) ; 
            binaryWriter.Write(source_frame.Length); binaryWriter . Write ( System . Text . Encoding . UTF8 . GetBytes ( source_frame ) ) ; 
            binaryWriter.Write(source_time);
            binaryWriter.Write(timeout);
            binaryWriter.Write(target_time);
            binaryWriter.Write(fixed_frame.Length); binaryWriter . Write ( System . Text . Encoding . UTF8 . GetBytes ( fixed_frame ) ) ; 
            binaryWriter.Write(advanced);
        }

        public override void Deserilize(System.IO.BinaryReader binaryReader)
        {
            target_frame = System.Text.Encoding.UTF8.GetString(binaryReader.ReadBytes(binaryReader.ReadInt32()));
            source_frame = System.Text.Encoding.UTF8.GetString(binaryReader.ReadBytes(binaryReader.ReadInt32()));
            source_time = binaryReader.ReadDateTime();
            timeout = binaryReader.ReadTimeSpan();
            target_time = binaryReader.ReadDateTime();
            fixed_frame = System.Text.Encoding.UTF8.GetString(binaryReader.ReadBytes(binaryReader.ReadInt32()));
            advanced = binaryReader.ReadBoolean();
        }
    }
}