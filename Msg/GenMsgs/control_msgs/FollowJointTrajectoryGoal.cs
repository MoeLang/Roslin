namespace Roslin.Msg.control_msgs
{
    [MsgInfo("control_msgs/FollowJointTrajectoryGoal", "69636787b6ecbde4d61d711979bc7ecb", "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n")]
    public partial class FollowJointTrajectoryGoal : RosMsg
    {
        public trajectory_msgs.JointTrajectory trajectory
        {
            get;
            set;
        }

        public JointTolerance[] path_tolerance
        {
            get;
            set;
        }

        public JointTolerance[] goal_tolerance
        {
            get;
            set;
        }

        public System.TimeSpan goal_time_tolerance
        {
            get;
            set;
        }

        public FollowJointTrajectoryGoal(): base()
        {
        }

        public FollowJointTrajectoryGoal(System.IO.BinaryReader binaryReader): base(binaryReader)
        {
        }

        public override void Serilize(System.IO.BinaryWriter binaryWriter)
        {
            trajectory.Serilize(binaryWriter);
            binaryWriter.Write(path_tolerance.Length); for  ( int  i  =  0 ;  i < path_tolerance . Length ;  i ++ ) path_tolerance [ i ] . Serilize ( binaryWriter ) ; 
            binaryWriter.Write(goal_tolerance.Length); for  ( int  i  =  0 ;  i < goal_tolerance . Length ;  i ++ ) goal_tolerance [ i ] . Serilize ( binaryWriter ) ; 
            binaryWriter.Write(goal_time_tolerance);
        }

        public override void Deserilize(System.IO.BinaryReader binaryReader)
        {
            trajectory = new trajectory_msgs.JointTrajectory(binaryReader);
            path_tolerance = new JointTolerance[binaryReader.ReadInt32()]; for  ( int  i  =  0 ;  i < path_tolerance . Length ;  i ++ ) path_tolerance [ i ]  =  new  JointTolerance ( binaryReader ) ; 
            goal_tolerance = new JointTolerance[binaryReader.ReadInt32()]; for  ( int  i  =  0 ;  i < goal_tolerance . Length ;  i ++ ) goal_tolerance [ i ]  =  new  JointTolerance ( binaryReader ) ; 
            goal_time_tolerance = binaryReader.ReadTimeSpan();
        }
    }
}