namespace Roslin.Msg.control_msgs
{
    [MsgInfo("control_msgs/FollowJointTrajectoryResult", "493383b18409bfb604b4e26c676401d2", "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n")]
    public partial class FollowJointTrajectoryResult : RosMsg
    {
        public System.Int32 SUCCESSFUL => 0;
        public System.Int32 INVALID_GOAL => -1;
        public System.Int32 INVALID_JOINTS => -2;
        public System.Int32 OLD_HEADER_TIMESTAMP => -3;
        public System.Int32 PATH_TOLERANCE_VIOLATED => -4;
        public System.Int32 GOAL_TOLERANCE_VIOLATED => -5;
        public System.Int32 error_code
        {
            get;
            set;
        }

        public System.String error_string
        {
            get;
            set;
        }

        public FollowJointTrajectoryResult(): base()
        {
        }

        public FollowJointTrajectoryResult(System.IO.BinaryReader binaryReader): base(binaryReader)
        {
        }

        public override void Serilize(System.IO.BinaryWriter binaryWriter)
        {
            binaryWriter.Write(error_code);
            binaryWriter.Write(error_string.Length); binaryWriter . Write ( System . Text . Encoding . UTF8 . GetBytes ( error_string ) ) ; 
        }

        public override void Deserilize(System.IO.BinaryReader binaryReader)
        {
            error_code = binaryReader.ReadInt32();
            error_string = System.Text.Encoding.UTF8.GetString(binaryReader.ReadBytes(binaryReader.ReadInt32()));
        }
    }
}