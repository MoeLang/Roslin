namespace Roslin.Msg.actionlib
{
    [MsgInfo("actionlib/TestRequestGoal", "db5d00ba98302d6c6dd3737e9a03ceea", "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 TERMINATE_SUCCESS = 0\nint32 TERMINATE_ABORTED = 1\nint32 TERMINATE_REJECTED = 2\nint32 TERMINATE_LOSE = 3\nint32 TERMINATE_DROP = 4\nint32 TERMINATE_EXCEPTION = 5\nint32 terminate_status\nbool ignore_cancel  # If true, ignores requests to cancel\nstring result_text\nint32 the_result    # Desired value for the_result in the Result\nbool is_simple_client\nduration delay_accept  # Delays accepting the goal by this amount of time\nduration delay_terminate  # Delays terminating for this amount of time\nduration pause_status  # Pauses the status messages for this amount of time\n")]
    public partial class TestRequestGoal : RosMsg
    {
        public System.Int32 TERMINATE_SUCCESS => 0;
        public System.Int32 TERMINATE_ABORTED => 1;
        public System.Int32 TERMINATE_REJECTED => 2;
        public System.Int32 TERMINATE_LOSE => 3;
        public System.Int32 TERMINATE_DROP => 4;
        public System.Int32 TERMINATE_EXCEPTION => 5;
        public System.Int32 terminate_status
        {
            get;
            set;
        }

        public System.Boolean ignore_cancel
        {
            get;
            set;
        }

        public System.String result_text
        {
            get;
            set;
        }

        public System.Int32 the_result
        {
            get;
            set;
        }

        public System.Boolean is_simple_client
        {
            get;
            set;
        }

        public System.TimeSpan delay_accept
        {
            get;
            set;
        }

        public System.TimeSpan delay_terminate
        {
            get;
            set;
        }

        public System.TimeSpan pause_status
        {
            get;
            set;
        }

        public TestRequestGoal(): base()
        {
        }

        public TestRequestGoal(System.IO.BinaryReader binaryReader): base(binaryReader)
        {
        }

        public override void Serilize(System.IO.BinaryWriter binaryWriter)
        {
            binaryWriter.Write(terminate_status);
            binaryWriter.Write(ignore_cancel);
            binaryWriter.Write(result_text.Length); binaryWriter . Write ( System . Text . Encoding . UTF8 . GetBytes ( result_text ) ) ; 
            binaryWriter.Write(the_result);
            binaryWriter.Write(is_simple_client);
            binaryWriter.Write(delay_accept);
            binaryWriter.Write(delay_terminate);
            binaryWriter.Write(pause_status);
        }

        public override void Deserilize(System.IO.BinaryReader binaryReader)
        {
            terminate_status = binaryReader.ReadInt32();
            ignore_cancel = binaryReader.ReadBoolean();
            result_text = System.Text.Encoding.UTF8.GetString(binaryReader.ReadBytes(binaryReader.ReadInt32()));
            the_result = binaryReader.ReadInt32();
            is_simple_client = binaryReader.ReadBoolean();
            delay_accept = binaryReader.ReadTimeSpan();
            delay_terminate = binaryReader.ReadTimeSpan();
            pause_status = binaryReader.ReadTimeSpan();
        }
    }
}